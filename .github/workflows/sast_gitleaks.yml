name: SAST_Gitleaks

on:
  workflow_call:
    inputs:
      timeout-minutes:
        type: number
        description: Timeout to break the job.
        required: false
        default: 5
      gitleaks-version:
        type: string
        description: GitLeaks version 
        required: false
        default: '8.18.2'
      runs-on:
        type: string
        description: Execution Runners
        required: false
        default: 'ubuntu-latest'
      gitleaks-config:
        type: string
        description: GitLeaks configuration file
        required: false
        default: 'cfg/gitleaks.toml' 
      fetch-depth:
        type: number
        description: Checkout fecth-depth
        required: false
        default: 1 # All history 
    secrets:
      token:
        required: true

jobs:
  sast_gitleaks:
    name: Scan Gitleaks
    runs-on: ${{ inputs.runs-on }}
    timeout-minutes: ${{ inputs.timeout-minutes }}
    permissions:                                                                         # Need write content to create issues
      contents: read
    env:
      GIT_LEAKS_DIR: ${{ github.WORKSPACE }}/gitleaks
    steps:

      - name: Checkout code
        uses: actions/checkout@9bb56186c3b09b4f86b1c65136769dd318469633               #@v4.1.2
        with:
          token: ${{ secrets.token }}
          fetch-depth: ${{ inputs.fetch-depth }}                                     # 1 Actual Commit 0 All commits

      - name: Install GitLeaks
        run: |
          mkdir -p ${{ env.GIT_LEAKS_DIR }}
          cd ${{ env.GIT_LEAKS_DIR }}
          wget https://github.com/zricethezav/gitleaks/releases/download/v${{ inputs.gitleaks-version }}/gitleaks_${{ inputs.gitleaks-version }}_linux_x64.tar.gz >/dev/null 2>&1
          tar -xvzf gitleaks_${{ inputs.gitleaks-version }}_linux_x64.tar.gz >/dev/null 2>&1
          chmod +x gitleaks          

      - name: Scan repository
        id: scan
        shell: bash
        env:
          GITLEAKS_CONFIG: ${{ github.WORKSPACE }}/${{ inputs.gitleaks-config }}
        run: |
          # Scan repository
          cd ${{ env.GIT_LEAKS_DIR }}
          ./gitleaks detect --redact -v -s ${{ github.WORKSPACE }} -r ${{ github.WORKSPACE }}/report_gitleaks.txt
     
